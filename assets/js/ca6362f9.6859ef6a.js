"use strict";(self.webpackChunkcomplan_docs=self.webpackChunkcomplan_docs||[]).push([[3677],{4621:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=s(4848),t=s(8453);const r={sidebar_position:1,id:"core-app-server-infra-class-diagram",title:"Core App Server Class Diagram"},i=void 0,o={id:"winpcs3/core-app-server/core-app-server-infra-class-diagram",title:"Core App Server Class Diagram",description:"",source:"@site/docs/winpcs3/core-app-server/core-app-server-class-diagram.md",sourceDirName:"winpcs3/core-app-server",slug:"/winpcs3/core-app-server/core-app-server-infra-class-diagram",permalink:"/docs/winpcs3/core-app-server/core-app-server-infra-class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/complanusa/winpcs/tree/main/docs/docs/docs/winpcs3/core-app-server/core-app-server-class-diagram.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"core-app-server-infra-class-diagram",title:"Core App Server Class Diagram"},sidebar:"tutorialSidebar",previous:{title:"Core App Server",permalink:"/docs/category/core-app-server"},next:{title:"RConn",permalink:"/docs/category/rconn"}},c={},d=[];function u(e){const n={mermaid:"mermaid",...(0,t.R)(),...e.components};return(0,a.jsx)(n.mermaid,{value:' %%{init: {"theme": "default", "themeVariables": {"zoom": true, "pan": true,},"zoomLevel": 1.5}}%%\nclassDiagram\n\nnamespace common {\n   class Result~E~ {\n        +boolean success\n        +E data\n        +string message\n    }\n}\n\nnamespace data{\n\n    class BaseEntity {\n        +string|undefined entityId\n        +string version\n        +boolean isDeleted\n        +number createTimeMillis\n        +number lastUpdateMillis\n    }\n\n    class UserEntity {\n        +string userId\n        +string email\n        +string[] roles\n        +boolean emailVerified\n    }\n\n     class JwtHeaderBasic {\n        +string|JWTSignAlgorithmBasic alg\n        +string typ\n        +string cty\n        +Array~string|Exclude<keyof JwtHeaderBasic, "crit">~ crit\n        +string kid\n        +string jku\n        +string|string[] x5u\n        +"x5t#S256" string\n        +string x5t\n        +string|string[] x5c\n    }\n\n    class JwtPayloadBasic {\n        +string iss\n        +string sub\n        +string|string[] aud\n        +number exp\n        +number nbf\n        +number iat\n        +string jti\n        +string scope\n    }\n\n    class JWTBasic {\n        +JwtHeaderBasic header\n        +JwtPayloadBasic payload\n        +string signature\n    }\n\n    class JwtPayloadEntity {\n        +string|undefined entityId\n        +string version\n        +boolean isDeleted\n        +number createTimeMillis\n        +number lastUpdateMillis\n        +any [others: string]\n        +string iss\n        +string sub\n        +string|string[] aud\n        +number exp\n        +number nbf\n        +number iat\n        +string jti\n        +string scope\n    }\n\n    class JwtDTO {\n        +JwtHeaderBasic header\n        +JwtPayloadEntity payload\n        +string signature\n        +string signedJwt\n    }\n\n    class UserAccessToken {\n        +string email\n        +string roles\n    }\n\n  }\n\n  namespace infra{\n    class crypt{\n      +void  generateAccessToken()\n      +void createSignedJwt()\n      +void validateToken()\n      +void passwordValidation()\n      +void passcode()\n    }\n\n    class email{\n      +void emailValidation()\n      +void sendEmail()\n    }\n\n    class logger{\n        +void debug()\n        +void vebrose()\n        +void info()\n        +void warning()\n        +void error()\n        +void fatal()\n    }\n\n    class config{\n\n    }\n\n    class eventsHub{\n\n    }\n\n    class CloudWatchLogger{\n\n    }\n\n    class IDataSource {\n        <<interface>>\n        +findById(id: ID): Promise<BaseEntity>\n        +find(query): Promise<BaseEntity[]>\n        +findOne(query, comparator?: (a: BaseEntity, b: BaseEntity) => number): Promise<BaseEntity>\n        +insertOrUpdate(entity: BaseEntity): Promise<BaseEntity>\n    }\n\n    class CouchDataSource {\n        +findById(id: ID): Promise<BaseEntity>\n        +find(query): Promise<BaseEntity[]>\n        +findOne(query, comparator?: (a: BaseEntity, b: BaseEntity) => number): Promise<BaseEntity>\n        +insertOrUpdate(entity: BaseEntity): Promise<BaseEntity>\n    }\n  }\n    CouchDataSource --|> IDataSource\n\n    UserEntity --|> BaseEntity\n\n    JwtPayloadEntity --|> BaseEntity\n    JwtPayloadEntity --|> JwtPayloadBasic\n    JwtDTO --|> JWTBasic\n    JwtDTO --* JwtPayloadEntity\n     UserAccessToken --|> JwtPayloadEntity\n\nnamespace applicative{\n      class BaseRegistrationDTO {\n        +string username\n        +string email\n        +string password\n    }\n\n    class BasicCredentials {\n        +string username\n        +string password\n    }\n\n\n\n    class SetUserEmailValidatedParams {\n        +string userId\n        +boolean emailValidated\n    }\n\n    class IAuthDataSource {\n        +createUser(userData: BaseRegistrationDTO): Promise~UserEntity~\n        +updateUser(user: UserEntity): Promise~UserEntity~\n        +findUserBySelector(selector: object): Promise~UserEntity|undefined~\n        +findUserByRegistrationData(registraitonDTO: BaseRegistrationDTO): Promise~UserEntity[]|undefined~\n        +findUserByUsername(username: string): Promise~UserEntity|undefined~\n        +authenticate(credentials: BasicCredentials): Promise~Result~UserEntity~~\n        +verifyUserEmail(params: SetUserEmailValidatedParams): Promise~void~\n    }\n\n      class CouchRegistrationData {\n        +string name\n        +string[] roles\n        +any others\n    }\n\n    class CouchDataSourceAuthProvider {\n        +IDataSource~string, CouchDbUserEntity~ couchUserDbDataProvider\n        +findUserByRegistrationData(registraitonDTO: BaseRegistrationDTO) Promise~CouchDbUserEntity[] | undefined~\n        +findUserByUsername(username: string) Promise~CouchDbUserEntity~\n        +findUserBySelector(selector: any) Promise~CouchDbUserEntity~\n        +init() void\n        +createUser(userData: BaseRegistrationDTO) Promise~CouchDbUserEntity~\n        +updateUser(user: CouchDbUserEntity) Promise~CouchDbUserEntity~\n        +verifyUserEmail(params: VerifyUserEmailParams) void\n        +authenticate(credentials: BasicCredentials) Promise~Result~CouchDbUserEntity~~\n        +isTokenRevoke(jwt: string) void\n        +revokeToken(jwt: string) void\n    }\n\n     class DbSecurityType {\n        +string databaseName\n        +object admins\n        +object members\n    }\n\n    class CouchDbAPI {\n        +userExists(userName: string) Promise~boolean~\n        +createUser(registrationData: CouchRegistrationData) Promise~object~\n        +authenticate(credentials: object) Promise~object~\n        +getDatabaseSecurity(params: object) Promise~object~\n        +setDatabaseSecurity(params: DbSecurityType) Promise~object~\n        +getDbsDocCount() Promise~object~\n    }\n\n    class UserEntity {\n        // Implementation details of UserEntity\n    }\n\n    class BasicCredentials {\n        +string username\n        +string password\n    }\n\n    class SetUserEmailValidatedParams {\n        +string userId\n        +boolean validated\n    }\n\n    class BaseRegistrationDTO {\n        +string userId\n        +string email\n        +string password\n    }\n\n    class ResetPasswordEmailValidationParams {\n        +string email\n        +string passcode\n    }\n\n    class SyncAuthCheckParams {\n        +string username\n        +string databaseName\n    }\n\n    class IAuthManager {\n        <<interface>>\n        +register(userRegistrationDAta: BaseRegistrationDTO) Promise~Result~UserEntity~~\n        +validateUserData(userRegistrationDAta: BaseRegistrationDTO) Promise~Result~\n        +signIn(credential: BasicCredentials) Promise~Result~UserEntity~~\n        +setUserEmailValidated(params: SetUserEmailValidatedParams) Promise~void~\n        +session(username: string) Promise~Result~UserEntity~~\n        +signOut(username: string) Promise~Result~\n        +resetPasswordEmailValidation(params: ResetPasswordEmailValidationParams) Promise~Result~\n        +resetPassword(params) Promise~Result~\n        +validatePasscode(params) Promise~Result~\n        +syncAuthCheck(params: SyncAuthCheckParams) Promise~Result~\n    }\n\n    class BaseAuthManager {\n        -authDataSource\n        -accessTokenManager\n        -resetPasswordTokenManager\n        -serverUrl\n        +constructor(authProvider, accessTokenManager, resetPasswordTokenManager, serverUrl)\n        +async syncAuthCheck(username, databaseName): Promise<Result<any>>\n        +async createAccessToken(username, roles, email, tokenId, expiresIn)\n        +async validateAccessToken(signedJwt)\n        +async register(userData: BaseRegistrationDTO): Promise<Result<E>>\n        +async session(jwt):<Result<E>>\n        +async validateUserData(userData: BaseRegistrationDTO): Promise<Result<any>>\n        -async sendVerificationEmail(email, emailVerificationToken, userId)\n        -async sendResetPasswordEmail(email, numericStringToken)\n        +async resetPasswordEmailValidation(email, passcode)\n        +async resetPassword(email, passcode, newPassword)\n        +async validatePasscode(email, passcode)\n        -async validatePassword(password): Promise<Result>\n        -throwInvalidPasswordError(password)\n    }\n\n    class AWSAccessTokenManager {\n        -sts: AWS.STS\n        +getAccessToken(username: string): Promise<any>\n        +init()\n    }\n\n    class ResetPasswordTokenManager {\n        +passwordResetTokensDbDataProvider: IDataSource<string, JwtPayloadEntity>\n        +init(): Promise<void>\n        +findUserToken(email: string): Promise<JwtPayloadEntity>\n        +passcode(length: number): string\n        +createResetPasswordToken(data: ResetPasswordTokenCreateData): Promise<JwtDTO>\n        +sendResetPasswordEmail(email, passcode): Promise<void>\n        +validatePasscode(data: ResetPasswordTokenValidationData): Promise<Result>\n        +revokeToken(email: string): Promise<Result<JwtPayloadEntity>>\n    }\n\n}\n\n    IAuthDataSource~E~ --\x3e UserEntity\n    IAuthDataSource~E~ --\x3e BaseRegistrationDTO\n    IAuthDataSource~E~ --\x3e BasicCredentials\n    IAuthDataSource~E~ --\x3e Result~E~\n    IAuthDataSource~E~ --\x3e SetUserEmailValidatedParams\n\n\n\n    CouchRegistrationData --\x3e BaseRegistrationDTO\n\n\n\n\n    CouchDataSourceAuthProvider --\x3e IDataSource\n    CouchDataSourceAuthProvider --\x3e BaseRegistrationDTO\n    CouchDataSourceAuthProvider --\x3e IAuthDataSource\n    CouchDataSourceAuthProvider --\x3e VerifyUserEmailParams\n    CouchDataSourceAuthProvider --\x3e BasicCredentials\n    CouchDataSourceAuthProvider --\x3e Result\n    CouchDataSourceAuthProvider --\x3e CouchDbUserEntity\n    CouchDataSourceAuthProvider --\x3e CouchRegistrationData\n\n\n\n    CouchDbAPI --\x3e CouchRegistrationData\n\n\n\n    IAuthManager --\x3e Result\n    IAuthManager --\x3e UserEntity\n    IAuthManager --\x3e BasicCredentials\n    IAuthManager --\x3e SetUserEmailValidatedParams\n    IAuthManager --\x3e BaseRegistrationDTO\n    IAuthManager --\x3e ResetPasswordEmailValidationParams\n    IAuthManager --\x3e SyncAuthCheckParams\n\n\n\n   BaseAuthManager ..|> IAuthManager\n\n\n    ResetPasswordTokenManager --\x3e IDataSource\n    ResetPasswordTokenManager --\x3e JwtPayloadEntity\n    ResetPasswordTokenManager --\x3e JwtDTO\n    ResetPasswordTokenManager --\x3e ResetPasswordTokenCreateData\n    ResetPasswordTokenManager --\x3e ResetPasswordTokenValidationData\n    ResetPasswordTokenManager --\x3e Result\n    ResetPasswordTokenManager --\x3e CouchDataProviderFactory\n    ResetPasswordTokenManager --\x3e crypt\n    ResetPasswordTokenManager --\x3e sendEmail\n\n\nnamespace ServerRouters{\n    class AuthRouter {\n        +validateUserData(req: Request, res: Response)\n        +registerRoute(req: Request, res: Response)\n        +loginRoute(req: Request, res: Response)\n        +session(req: Request, res: Response)\n        +logOut(req: Request, res: Response)\n        +testJWTRoute(req: Request, res: Response)\n        +verifyEmail(req: Request, res: Response)\n    }\n\n    class Sync{\n\n    }\n}\n\n    authRouter --\x3e CouchDataSourceAuthProvider\n    authRouter --\x3e AccessTokenManager\n    authRouter --\x3e ResetPasswordTokenManager\n    authRouter --\x3e AWSAccessTokenManager\n    authRouter --\x3e BaseAuthManager\n    authRouter --\x3e createRequestAuthenticationMiddleware'})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(6540);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);