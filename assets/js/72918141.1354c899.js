"use strict";(self.webpackChunkcomplan_docs=self.webpackChunkcomplan_docs||[]).push([[7522],{2982:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=i(4848),s=i(8453);const r={sidebar_position:1,id:"rconn-entity-diagram",title:"RConn Table Relations Diagram"},l=void 0,c={id:"winpcs3/rconn/rconn-entity-diagram",title:"RConn Table Relations Diagram",description:"Entity Relations Implementaion With Con\\_ Tables And Rconn Table",source:"@site/docs/winpcs3/rconn/rconn-entity-diagram.md",sourceDirName:"winpcs3/rconn",slug:"/winpcs3/rconn/rconn-entity-diagram",permalink:"/docs/winpcs3/rconn/rconn-entity-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/complanusa/winpcs/tree/main/docs/docs/docs/winpcs3/rconn/rconn-entity-diagram.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"rconn-entity-diagram",title:"RConn Table Relations Diagram"},sidebar:"tutorialSidebar",previous:{title:"RConn",permalink:"/docs/category/rconn"},next:{title:"React Admin Integration",permalink:"/docs/category/react-admin-integration"}},o={},d=[{value:"Entity Relations Implementaion With Con_ Tables And Rconn Table",id:"entity-relations-implementaion-with-con_-tables-and-rconn-table",level:3},{value:"Table <code>con_</code> Overview:",id:"table-con_-overview",level:4},{value:"Table <code>rconn</code> Overview:",id:"table-rconn-overview",level:4},{value:"Specific Implementations :",id:"specific-implementations-",level:3},{value:"Hierarchy and Checksheets:",id:"hierarchy-and-checksheets",level:4}];function a(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"entity-relations-implementaion-with-con_-tables-and-rconn-table",children:"Entity Relations Implementaion With Con_ Tables And Rconn Table"}),"\n",(0,t.jsx)(n.mermaid,{value:'erDiagram\n\n    rconn {\n        int rserial\n        string itembase\n        string itemfld\n        string itemdesfld\n        string itemicon\n        string itemconfld\n        string relbase\n        string relfld\n        string reldesfld\n        string relicon\n        string relconfld\n        string conbase\n        string context\n        string conitemfld\n        string conitemsecond\n        string conrelfld\n        string conrelsecond\n    }\n\n    cxdict {\n        string _id\n        string _rev\n        int rserial\n        string itembase\n        string itemfld\n        string itemunifld\n        string itemrelfld\n        string itemdesflds\n        int itemdfcount\n        string defaulticon\n        string itemicon\n        string itemiconmode\n        string iscored\n        string keepfld\n        string basedescr\n        string wfilter\n    }\n\n    con_base_table_name {\n        string wright\n        string right_rserial\n        string wleft\n        string left_rserial\n    }\n\n    item_base_table_name {\n        string _id\n        string tag_no\n    }\n\n    rel_base_table_name{\n        string _id\n        string tag_no\n    }\n\n    core {\n        string hometable\n        int item_serial\n        string item_id\n    }\n\n   rconn ||--o{ con_base_table_name: "conbase"\n   rconn ||--o{ item_base_table_name: "itembase"\n   rconn ||--o{ rel_base_table_name: "relbase"\n   core ||--o{ item_base_table_name: "hometable = item_base_table_name, item_serial = _id, item_id = tag=no"\n   core ||--o{ rel_base_table_name: "hometable = rel_base_table_name, item_serial = _id, item_id = tag=no"'}),"\n",(0,t.jsx)(n.p,{children:"Complan utilizes a similar and parallel mechanism to RDBMS relational tables to hold and configure connections between entities in CouchDB."}),"\n",(0,t.jsxs)(n.p,{children:["In order to create a relation between entities in a certain ",(0,t.jsx)(n.code,{children:"item_base"})," table and a certain ",(0,t.jsx)(n.code,{children:"rel_base"})," table, a new designated table with a ",(0,t.jsx)(n.code,{children:"con"})," or ",(0,t.jsx)(n.code,{children:"con_"})," prefix, such as ",(0,t.jsx)(n.code,{children:"conac1"})," or ",(0,t.jsx)(n.code,{children:"con_checksheet"}),", is defined.\nThe ",(0,t.jsx)(n.code,{children:"con_base"})," table will hold two fields: ",(0,t.jsx)(n.code,{children:"wright"}),", refering to the first table's name, and ",(0,t.jsx)(n.code,{children:"right_rserial"}),", refering to the document's/entity's ",(0,t.jsx)(n.code,{children:"id"}),"; similarly, ",(0,t.jsx)(n.code,{children:"wleft"})," and ",(0,t.jsx)(n.code,{children:"left_rserial"})," will refer to the second table, respectively."]}),"\n",(0,t.jsxs)(n.p,{children:["Because ",(0,t.jsx)(n.code,{children:"wleft"})," and ",(0,t.jsx)(n.code,{children:"wright"})," hold the related table names, relations between different tables can be defined either within the same ",(0,t.jsx)(n.code,{children:"con_base_table_name"})," or in a seperate ",(0,t.jsx)(n.code,{children:"con_table_name"}),", this depends on the specific sub-module's implementation."]}),"\n",(0,t.jsxs)(n.p,{children:["The values for ",(0,t.jsx)(n.code,{children:"wleft/wright"})," should be drawn from the ",(0,t.jsx)(n.code,{children:"cxdict"})," table, which stores records for all tables (dbs), including their ",(0,t.jsx)(n.code,{children:"itemfld"}),", which determines their ",(0,t.jsx)(n.code,{children:"id"})," field."]}),"\n",(0,t.jsxs)(n.h4,{id:"table-con_-overview",children:["Table ",(0,t.jsx)(n.code,{children:"con_"})," Overview:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"wright"})}),": Refers to the name of the first table involved in the relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"right_rserial"})}),": Refers to the entity's ",(0,t.jsx)(n.code,{children:"id"})," in the first table (same as FK in RDBMS)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"wleft"})}),": Refers to the name of the second table involved in the relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"left_rserial"})}),": Refers to the entity's ",(0,t.jsx)(n.code,{children:"id"})," in the second table (same as FK in RDBMS)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Lastly, additional table - ",(0,t.jsx)(n.code,{children:"rconn"})," - is used as a dictionary or index for all ",(0,t.jsx)(n.code,{children:"con_tables"})," and the tables they relate to.\nThis setup enables to search and query of all ",(0,t.jsx)(n.code,{children:"con"})," tables and their relations for any given entity."]}),"\n",(0,t.jsxs)(n.h4,{id:"table-rconn-overview",children:["Table ",(0,t.jsx)(n.code,{children:"rconn"})," Overview:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Item Information Fields"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"itembase"})}),": This field references to the first table of the two, per-implementation, it defines the base entity from which the relationship originates."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"itemfld"})}),": Specifies the key field in ",(0,t.jsx)(n.code,{children:"itembase"})," for the relationship, usually either UID ",(0,t.jsx)(n.code,{children:"_id"})," or an applicative ",(0,t.jsx)(n.code,{children:"id"})," field."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"itemdesfld"})}),": Holds the description field in ",(0,t.jsx)(n.code,{children:"itembase"})," that may describe the item or its purpose in the relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"itemicon"})}),": Stores an icon representing the item in ",(0,t.jsx)(n.code,{children:"itembase"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"itemconfld"})}),": Refers to a field in ",(0,t.jsx)(n.code,{children:"itembase"})," used for further configuration or constraints in the relationship."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Related Entity Fields"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"relbase"})}),": This field references the second table of th two, per-implementation, it defines the related entity in the relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"relfld"})}),": Specifies the field in ",(0,t.jsx)(n.code,{children:"relbase"})," that is involved in the relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reldesfld"})}),": Contains the description field in ",(0,t.jsx)(n.code,{children:"relbase"})," that may describe the related entity's role."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"relicon"})}),": Stores an icon representing the related entity."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"relconfld"})}),": Refers to a field in ",(0,t.jsx)(n.code,{children:"relbase"})," for additional configuration or constraints."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connection Fields"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conbase"})}),": Holds the table name that will store the connections between the two tables, as described above."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"context"})}),": Contextual information or additional information for the table's relationship."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conitemfld"})}),": The field that would describe the first table name, typically ",(0,t.jsx)(n.code,{children:"wright"})," or ",(0,t.jsx)(n.code,{children:"wleft"})," by convention, although theoretically, it could be something else. There is no strict enforcement that it must be ",(0,t.jsx)(n.code,{children:"wright"})," or ",(0,t.jsx)(n.code,{children:"wleft"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conitemsecond"})}),": The field in the ",(0,t.jsx)(n.code,{children:"con_"})," table that would refer to the first table's ",(0,t.jsx)(n.code,{children:"id"})," field, typically ",(0,t.jsx)(n.code,{children:"right_rserial"})," or ",(0,t.jsx)(n.code,{children:"left_rserial"})," by convention, although theoretically, it could be something else. Again, there is no strict enforcement that it must be ",(0,t.jsx)(n.code,{children:"right_rserial"})," or ",(0,t.jsx)(n.code,{children:"left_rserial"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conrelfld"})}),": The field that would describe the second table name, typically ",(0,t.jsx)(n.code,{children:"wleft"})," or ",(0,t.jsx)(n.code,{children:"wright"})," by convention, although theoretically, it could be something else, as can be seen, there is no strict enforcement that it must be ",(0,t.jsx)(n.code,{children:"wright"})," or ",(0,t.jsx)(n.code,{children:"wleft"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conrelsecond"})}),": The field in the ",(0,t.jsx)(n.code,{children:"con_"})," table that would refer to the second table's ",(0,t.jsx)(n.code,{children:"id"})," field, typically ",(0,t.jsx)(n.code,{children:"left_rserial"})," or ",(0,t.jsx)(n.code,{children:"right_rserial"})," by convention, although theoretically, it could be something else. There is no strict enforcement that it must be ",(0,t.jsx)(n.code,{children:"left_rserial"})," or ",(0,t.jsx)(n.code,{children:"right_rserial"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"specific-implementations-",children:"Specific Implementations :"}),"\n",(0,t.jsx)(n.h4,{id:"hierarchy-and-checksheets",children:"Hierarchy and Checksheets:"}),"\n",(0,t.jsx)(n.p,{children:"Hierarchy screens implementation is as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Default hierarchy Relations :"}),"\nConnections between root hierarchy tables :"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"certsite"}),"\n",(0,t.jsx)(n.li,{children:"certunit"}),"\n",(0,t.jsx)(n.li,{children:"certsys"}),"\n",(0,t.jsx)(n.li,{children:"certac1"}),"\n",(0,t.jsx)(n.li,{children:"certarea"}),"\n",(0,t.jsx)(n.li,{children:"certmc1"}),"\n",(0,t.jsx)(n.li,{children:"certmile"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"and other tables, including equpimnt tables or punchs (autopl table) is done via standard rconn records."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Equpiment - Checksheets Relations :"})}),"\n",(0,t.jsxs)(n.p,{children:["All relations between ",(0,t.jsx)(n.code,{children:"equipment"})," tables, which have prefix ",(0,t.jsx)(n.code,{children:"eng"})," and ",(0,t.jsx)(n.code,{children:"checksheets"}),", are :"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Configured in rconn same as rest of the tables relations and per system design and guidelines."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Would always be configured and stored in ",(0,t.jsx)(n.code,{children:"con_checksheet_equipment"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This means that all relations between any equpiment ",(0,t.jsx)(n.code,{children:"eng"})," entity type and checksheets would be of shape:\n",(0,t.jsx)(n.code,{children:'{"itembase": "eng**TBD**","relbase": "checksheet","conbase": "con_checksheet_equipment","itemfld": "**TBD**","itemdesfld": "**TBD**","relfld": "name","reldesfld": "description","relicon": "icon","relconfld": "_id","conitemfld": "wleft","conitemsecond": "left_rserial","conrelfld": "wright","conrelsecond": "right_rserial",}'})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var t=i(6540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);