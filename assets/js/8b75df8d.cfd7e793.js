"use strict";(self.webpackChunkcomplan_docs=self.webpackChunkcomplan_docs||[]).push([[5187],{7627:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var t=o(4848),i=o(8453);const a={id:"sync-manager-class-diagram",title:"Sync-Manager Class Diagram",sidebar_position:2},s=void 0,c={id:"winpcs3/data sync/sync-manager-class-diagram",title:"Sync-Manager Class Diagram",description:"",source:"@site/docs/winpcs3/data sync/sync-manager-class-diagram.md",sourceDirName:"winpcs3/data sync",slug:"/winpcs3/data sync/sync-manager-class-diagram",permalink:"/docs/winpcs3/data sync/sync-manager-class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/complanusa/winpcs/tree/main/docs/docs/docs/winpcs3/data sync/sync-manager-class-diagram.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"sync-manager-class-diagram",title:"Sync-Manager Class Diagram",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CouchDb-PouchDb Data Sync",permalink:"/docs/category/couchdb-pouchdb-data-sync"},next:{title:"Sync-Manager Sync Sequence",permalink:"/docs/winpcs3/data sync/sync-manager-sync-sequence"}},r={},d=[];function E(n){const e={mermaid:"mermaid",...(0,i.R)(),...n.components};return(0,t.jsx)(e.mermaid,{value:'classDiagram\n\n class Complan{\n\n }\n\n class CouchDbReplicaProviderAppContext {\n    +void syncSystemRepositoriesAndData()\n    +void realTimeSync()\n\n }\n\n Complan "1" --* "1" CouchDbReplicaProviderAppContext\n\n class CouchDbReplicaProviderContextData {\n        +allTables\n        +allDatabases\n        +contextRepositories\n        +symtRepository\n        +coreRepository\n        +repositoriesSyncStats\n        +syncContextInited\n        +applicativeDbs\n        +realTimeSync\n    }\n\n\n\n CouchDbReplicaProviderAppContext "1" --* "1" CouchDbReplicaProviderContextData\n\n class useDb{\n\n }\n useDb "1" --* "1" CouchDbReplicaProviderAppContext : useContext\n\n\n class ReactAdminScreen {\n\n }\n\n class withDbGate {\n\n }\n\n note for withDbGate "Util class instead of direct useDb from screens"\n\n\nReactAdminScreen "1" --* "1" useDb\n\n Complan "1" --* "N" ReactAdminScreen\n\nwithDbGate "1" --\x3e "1" ReactAdminScreen\n\n class SyncManager {\n        +void getRepository()\n        +void hasRepository()\n        +void initRepository()\n        +void initRepositoryBulk()\n        +void removeRepository()\n        +void allRepositories()\n        +void groupFullSyncProgress()\n        +void syncContext()\n        +void login()\n        +void logout()\n        +void repositoriesStats()\n        +void mon()\n        +void on()\n    }\n\n     CouchDbReplicaProviderAppContext "1" --* "1" SyncManager\n\n\n\n    class Repository {\n        +REPOSITORY_ACTIVITY repositoryActivity\n        +REPOSITORY_STATE repositoryState\n        +PouchDbApiInstance\n        +void startSync()\n        +void cancelSync()\n        +void info()\n        +void all()\n        +void allDocs()\n        +void count()\n        +void createIndex()\n        +void find()\n        +void get()\n        +void getIndex()\n        +void post()\n        +void put()\n        +void remove()\n        +void removeIndex()\n        +void search()\n        +void on()\n        +void state()\n        +void waitState()\n        +void localDbName()\n        +void login()\n        +void logout()\n        +void repositoryId()\n        +void localDocsCount()\n        +void remoteDocsCount()\n    }\n\n     class REPOSITORY_STATE {\n        <<enumeration>>\n        +REPOSITORY_EMPTY: int = 1\n        +REPOSITORY_UNSYNCED: int = 2\n        +REPOSITORY_STALE: int = 4\n        +REPOSITORY_SYNC_PENDING: int = 8\n        +REPOSITORY_PARTIALLY_SYNCED: int = 16\n        +REPOSITORY_FULLY_SYNCED: int = 32\n        +REPOSITORY_FAULT: int = 64\n    }\n\n    class REPOSITORY_ACTIVITY {\n        <<enumeration>>\n        +REPOSITORY_NO_ACTIVITY: int = 1\n        +REPOSITORY_SYNC_PENDING: int = 2\n        +REPOSITORY_SYNCING: int = 4\n    }\n    Repository "1"--* "1" REPOSITORY_STATE\n    Repository "1"--* "1" REPOSITORY_ACTIVITY\n\n     SyncManager "1" --* "N" Repository\n\n\n\n    class PouchDbApiInstance {\n        +void replicate()\n        +void cancelReplication()\n        +void isReplicating()\n        +void halt()\n        +void info()\n        +void post()\n        +void put()\n        +void get()\n        +void remove()\n        +void all()\n        +void find()\n        +void createIndex()\n    }\n\n\n\n    Repository "1" --* "1" PouchDbApiInstance\n\n     class EventsHub {\n\n    }\n    SyncManager "1" <--\x3e "1" EventsHub\n    Repository "1" <--\x3e "1" EventsHub\n\n     class SYNC_EVENT_TYPES {\n        <<enumeration>>\n        +START_PARTITION_REPLICATION_REQUEST_EVENT: String\n        +START_PARTITION_REPLICATION_REQUEST_ACK_EVENT: String\n        +START_PARTITION_REPLICATION_PENDING_EVENT: String\n        +HALT_REPLICATION_REQUEST_EVENT: String\n        +HALT_REPLICATION_ACK_EVENT: String\n        +COMPLETED_PARTITION_REPLICATION_EVENT: String\n        +COMPLETED_DB_REPLICATION_EVENT: String\n        +SYNC_DATA_TYPE_REQUEST_ALREADY_EXISTS_IN_QUEUE: String\n        +CANCEL_REQUEST_EVENT: String\n        +CANCEL_REQUEST_ACK_EVENT_: String\n        +CANCEL_REQUEST_DECLINE_EVENT_: String\n        +REQUEST_DROP_EVENT: String\n        +REQUEST_DISCONNECT_EVENT: String\n    }\n\n    Repository --\x3e  SYNC_EVENT_TYPES\n\n    class SyncScheduler {\n\n    }\n\n     SyncManager "1" --* "1" SyncScheduler\n\n    SyncScheduler "1" <--\x3e "1" EventsHub\n    SyncScheduler --\x3e  SYNC_EVENT_TYPES'})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(E,{...n})}):E(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>c});var t=o(6540);const i={},a=t.createContext(i);function s(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);