"use strict";(self.webpackChunkcomplan_docs=self.webpackChunkcomplan_docs||[]).push([[2418],{4518:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=i(4848),t=i(8453);const s={},c="How CouchDB Queries are Done Through WinPCS1",r={id:"winpcs1/lookups-indexing-and-searching",title:"How CouchDB Queries are Done Through WinPCS1",description:"General Notes",source:"@site/docs/winpcs1/lookups-indexing-and-searching.md",sourceDirName:"winpcs1",slug:"/winpcs1/lookups-indexing-and-searching",permalink:"/docs/winpcs1/lookups-indexing-and-searching",draft:!1,unlisted:!1,editUrl:"https://github.com/complanusa/winpcs/tree/main/docs/docs/docs/winpcs1/lookups-indexing-and-searching.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WinPCS1",permalink:"/docs/winpcs1/"},next:{title:"WinpCS3",permalink:"/docs/winpcs3/"}},l={},d=[{value:"General Notes",id:"general-notes",level:2},{value:"Locations of _find Type Activities",id:"locations-of-_find-type-activities",level:2},{value:"Detailed Descriptions of Key Functions",id:"detailed-descriptions-of-key-functions",level:2},{value:"COUCH64_LookupN",id:"couch64_lookupn",level:3},{value:"COUCH64_LookupN - Implementation",id:"couch64_lookupn---implementation",level:4},{value:"COUCH64_LookupN - Lookups, Indexing, and Searching",id:"couch64_lookupn---lookups-indexing-and-searching",level:5},{value:"COUCH64_LookupN - Function Preamble",id:"couch64_lookupn---function-preamble",level:6},{value:"COUCH64_LookupN - Query Request",id:"couch64_lookupn---query-request",level:6},{value:"COUCH64_LookupN - Looping Through Data",id:"couch64_lookupn---looping-through-data",level:6},{value:"COUCH64_LookupN - Formulating the Selector",id:"couch64_lookupn---formulating-the-selector",level:6},{value:"COUCH64_LookupN - Actual Transaction",id:"couch64_lookupn---actual-transaction",level:6},{value:"COUCH64_LookupN - Handling the Response",id:"couch64_lookupn---handling-the-response",level:6},{value:"COUCH64_LookupN - Function Conclusion",id:"couch64_lookupn---function-conclusion",level:6},{value:"COUCH64_Lookup1C",id:"couch64_lookup1c",level:3},{value:"COUCH64_Lookup1C - Implementation",id:"couch64_lookup1c---implementation",level:4},{value:"COUCH64_Lookup1C - Retrieving Single Record Information",id:"couch64_lookup1c---retrieving-single-record-information",level:5},{value:"COUCH64_Lookup1C - Connection Management",id:"couch64_lookup1c---connection-management",level:5},{value:"COUCH64_Lookup1C - Initial Text Processing",id:"couch64_lookup1c---initial-text-processing",level:5},{value:"COUCH64_Lookup1C - Crafting the Query",id:"couch64_lookup1c---crafting-the-query",level:5},{value:"COUCH64_Lookup1C - Response Handling",id:"couch64_lookup1c---response-handling",level:5},{value:"COUCH64_Lookup1C - Conclusion",id:"couch64_lookup1c---conclusion",level:5},{value:"COUCH64_ORListQuery",id:"couch64_orlistquery",level:3},{value:"COUCH64_ORListQuery - Implementation",id:"couch64_orlistquery---implementation",level:4},{value:"COUCH64_ORListQuery - Connection to CouchDB",id:"couch64_orlistquery---connection-to-couchdb",level:5},{value:"COUCH64_ORListQuery - Data Processing",id:"couch64_orlistquery---data-processing",level:5},{value:"COUCH64_ORListQuery - Query Execution and Response",id:"couch64_orlistquery---query-execution-and-response",level:5},{value:"COUCH64_ORListQuery - Conclusion",id:"couch64_orlistquery---conclusion",level:5}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-couchdb-queries-are-done-through-winpcs1",children:"How CouchDB Queries are Done Through WinPCS1"})}),"\n",(0,o.jsx)(n.h2,{id:"general-notes",children:"General Notes"}),"\n",(0,o.jsxs)(n.p,{children:["The server uses a number of .so files or DLLs, containing functions with a specified order of dependencies. Often, functions in a lower level need to call functions in a higher level. This is achieved through dynamic linking. For instance, a wrapper function named ",(0,o.jsx)(n.code,{children:"DynDLL_XXXX"})," for some function ",(0,o.jsx)(n.code,{children:"DLL_XXX"})," is created in the lower level. This wrapper obtains the address of the higher-level function through ",(0,o.jsx)(n.code,{children:"GetDLLFunction()"}),", casts the returned pointer to the appropriate function pointer, and then calls the function. The ",(0,o.jsx)(n.code,{children:"GetDLLFunction()"})," (implemented in ",(0,o.jsx)(n.code,{children:"cwulib64/dynlk.c"}),") is a wrapper around Windows' ",(0,o.jsx)(n.code,{children:"GetModuleHandle()"}),"/",(0,o.jsx)(n.code,{children:"GetProcAddress()"}),", or Linux's ",(0,o.jsx)(n.code,{children:"dlopen()"}),"/",(0,o.jsx)(n.code,{children:"dlsym()"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"locations-of-_find-type-activities",children:"Locations of _find Type Activities"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"lookupn.c"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_LookupN"}),": Line 955"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_Lookup1C"}),": Line 1388"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"orquery.c"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_ORListQuery()"}),": Line 98"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_ORQueryExt()"}),": Line 330"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"selects.c"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_DoSelectFwd"}),": Line 264"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_DoScanPN"}),": Line 581"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"users.c"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"COUCH64_HaveLocalUser"}),": Line 105"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"SetLUPass"}),": Line 464"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"RemoveLU"}),": Line 723"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Finds are also seen in some dead code in ",(0,o.jsx)(n.code,{children:"nexti.c"})," and ",(0,o.jsx)(n.code,{children:"rcmr.c"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"detailed-descriptions-of-key-functions",children:"Detailed Descriptions of Key Functions"}),"\n",(0,o.jsx)(n.h3,{id:"couch64_lookupn",children:"COUCH64_LookupN"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File"}),": ",(0,o.jsx)(n.code,{children:"couch64/lookupn.c"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Line"}),": 955"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),": Pulls relevant records from ",(0,o.jsx)(n.code,{children:"symt"})," about a table during opening and is called from ",(0,o.jsx)(n.code,{children:"TMGT_LookupN"})," and during calls to looping report-date generating functions. (Looping reports are of the style, ",(0,o.jsx)(n.code,{children:"StartSomeKindOfListing"})," -- ",(0,o.jsx)(n.code,{children:"ContinueData"}),"). These consist of an intial step pulling out a report data set,\nthe passing on bits of this to the client upon request."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"couch64_lookupn---implementation",children:"COUCH64_LookupN - Implementation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prototype"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:"int APIENTRY COUCH64_LookupN(\n  char *tablename,\n  void * handle, \n  int action,                                    /* GF_FIRST, GF_EQ, GF_GT, GF_GE */ \n  char **keyfields, char **keydata, int kcount,  /* Search keys, fields, values, how many. */ \n  char **exfields, int fcount,                   /* Fields to extract */ \n  void **pvpx,                                   /* Report-structure where the data is stored */ \n  int repconcat                                  /* Indicate if we are to make a new report (0) \n                                                    or append to an existing one (!=0).\n                                                 */\n);\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Establishes connection to CouchDB server using HTTPS."}),"\n",(0,o.jsx)(n.li,{children:"Constructs a query string /tablename/_find."}),"\n",(0,o.jsx)(n.li,{children:"Uses COUCH64_IsIndex() and COUCH64_CreateIndex() to ensure there is an index for keyfields."}),"\n",(0,o.jsx)(n.li,{children:"Loops to handle data pagination using bookmarks."}),"\n",(0,o.jsx)(n.li,{children:"Parses HTTP response and populates a Report structure with the data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookupn---lookups-indexing-and-searching",children:"COUCH64_LookupN - Lookups, Indexing, and Searching"}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---function-preamble",children:"COUCH64_LookupN - Function Preamble"}),"\n",(0,o.jsxs)(n.p,{children:["The first calls in the function are the usual preamble. This includes the environment info established when the client connected to the server, which includes stored info about the table being looked at, ",(0,o.jsx)(n.code,{children:"tablename"}),". By this time, the table has to be opened and known. Then ",(0,o.jsx)(n.code,{children:"CDB_Establish()"})," is called to open the network connection to the CouchDB server using HTTPS."]}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---query-request",children:"COUCH64_LookupN - Query Request"}),"\n",(0,o.jsxs)(n.p,{children:["Next, a string named ",(0,o.jsx)(n.code,{children:"fragment"})," is set to ",(0,o.jsx)(n.code,{children:"/tablename/_find"}),", as this will be part of the query request. Then ",(0,o.jsx)(n.code,{children:"COUCH64_IsIndex()"})," is called on the ",(0,o.jsx)(n.code,{children:"keyfields"})," to ensure there exists an index for these. If none exists, there is then a call to ",(0,o.jsx)(n.code,{children:"COUCH64_CreateIndex()"}),"."]}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---looping-through-data",children:"COUCH64_LookupN - Looping Through Data"}),"\n",(0,o.jsx)(n.p,{children:"We then loop, as there is no guarantee that the first single call will pull everything. There is a limit on the data size and the number of records available in each call. When wanting the entire table, which is a common situation with hierarchies or selection lists, the bookmark at the end of the query is used to continue it in another turn, for as long as needed."}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---formulating-the-selector",children:"COUCH64_LookupN - Formulating the Selector"}),"\n",(0,o.jsxs)(n.p,{children:["The action continues with formulating the selector, based on the key fields, the fields to extract, and the saved bookmark when there is one. The function ",(0,o.jsx)(n.code,{children:"httpassemble()"})," then frames the HTTPS request with the server, authentication, POST action, fragment, and selector, into the string named ",(0,o.jsx)(n.code,{children:"emitted"}),"."]}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---actual-transaction",children:"COUCH64_LookupN - Actual Transaction"}),"\n",(0,o.jsxs)(n.p,{children:["So far, all the action has been string editing. Now comes the actual transaction, ",(0,o.jsx)(n.code,{children:"CDB_Conversate()"}),", which is where the request is sent, processed, and the reply in the form of the header and the payload is received. This function is general, the returned header and payload are dynamically allocated and might be NULL and size 0 when there is no header and/or payload for whatever reason."]}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---handling-the-response",children:"COUCH64_LookupN - Handling the Response"}),"\n",(0,o.jsxs)(n.p,{children:['Having the header, the HTTP status in it has been found, and various actions are done. At some point, the status code 429 would be returned, meaning "slow down". The 200 is OK, in which case the payload is parsed and the various values are put into a Report structure, a new row is made with ',(0,o.jsx)(n.code,{children:"AddEmptyRowRRD()"}),", then the fields are copied. If we are making a new Report instead of concatenating onto an old one, this is created here, then later on the loop continues in concatenation mode."]}),"\n",(0,o.jsx)(n.p,{children:"The returned bookmark is also saved for the next turn around. If we were caught speeding, having got the 429, we wait for 200 milliseconds, then try again."}),"\n",(0,o.jsx)(n.p,{children:"When we get fewer records than we expected in a call, this is taken to indicate that we have come to the end of the data, so we break out of the loop."}),"\n",(0,o.jsx)(n.h6,{id:"couch64_lookupn---function-conclusion",children:"COUCH64_LookupN - Function Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["Finally, the number of records is counted, the conversation to the CouchDB server is terminated with ",(0,o.jsx)(n.code,{children:"CDB_Close()"})," and the function returns ",(0,o.jsx)(n.code,{children:"WE_OK"})," (0) for OK, and ",(0,o.jsx)(n.code,{children:"WE_NOTFND"})," (4) if there were 0 records found and thus nothing to look at in the Report."]}),"\n",(0,o.jsx)(n.h3,{id:"couch64_lookup1c",children:"COUCH64_Lookup1C"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File"}),": ",(0,o.jsx)(n.code,{children:"couch64/lookupn.c"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Line"}),": 1388"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),": Used in calls for generating next sequence value and during data updates. Called during data Update, ",(0,o.jsx)(n.code,{children:"TMGT_Update"}),", tmgt64/xiud.c line 718. Called via ",(0,o.jsx)(n.code,{children:"TMGT_Lookup1"})," tmgt64/lookup.c line 261. None of these populate the record, so they devolve to ",(0,o.jsx)(n.code,{children:"COUCH64_Lookup1C"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"couch64_lookup1c---implementation",children:"COUCH64_Lookup1C - Implementation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prototype"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:"int Lookup1C(\n  char *tablename,\n  void * handle,\n  struct cdbconn *icconn,\n  int action,                                    /* GF_FIRST, GF_EQ, GF_GT, GF_GE */ \n  char **keyfields, char **keydata, int kcount,  /* Search key-values. */ \n  char **exfields, int fcount,                   /* Fields to extract */ \n  char **exdata, size_t rdamax                   /* Max allocated size of each of the exdata objects. */\n)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Returns information about a single record, where the ",(0,o.jsx)(n.code,{children:"fcount exfields[]"})," have their data returned in the ",(0,o.jsx)(n.code,{children:"exdata[]"})," strings with allocation length limited to ",(0,o.jsx)(n.code,{children:"rdamax"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"May use an existing connection to the CouchDB server or establish a new one. Reusing connections is beneficial due to the cost of establishing and taking down connections."}),"\n",(0,o.jsxs)(n.li,{children:["Begins with text processing, establishing strings ",(0,o.jsx)(n.code,{children:"fragment"})," from the table name, ",(0,o.jsx)(n.code,{children:"selector"})," from the ",(0,o.jsx)(n.code,{children:"keyfields"}),", ",(0,o.jsx)(n.code,{children:"keyvalues"}),", and fields whose data to pull. These are then marshalled into the actual query to be emitted."]}),"\n",(0,o.jsxs)(n.li,{children:["Calls ",(0,o.jsx)(n.code,{children:"CDB_conversate()"})," to send the request to the CouchDB server and receive the header and payload of the reply."]}),"\n",(0,o.jsx)(n.li,{children:"Inspects the header for status (OK or otherwise), then parses the payload and copies the values for the fields to the output strings."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---retrieving-single-record-information",children:"COUCH64_Lookup1C - Retrieving Single Record Information"}),"\n",(0,o.jsx)(n.p,{children:"SingleRecordInfo_Lookup - Function Overview\nThis process retrieves information about a single record. It involves allocating memory for the expected fields with exdata = Alloc2D(fcount, rdamax, 1); where fcount represents the number of fields, and rdamax is the maximum allocation length for each field's data."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---connection-management",children:"COUCH64_Lookup1C - Connection Management"}),"\n",(0,o.jsx)(n.p,{children:"The operation may utilize an existing connection to the CouchDB server or establish a new one as needed. Given the cost associated with setting up and tearing down network connections, it is advantageous to reuse a connection across multiple calls whenever possible."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---initial-text-processing",children:"COUCH64_Lookup1C - Initial Text Processing"}),"\n",(0,o.jsx)(n.p,{children:"The initial steps include text processing where fragment is derived from the table name and selector is formulated from key fields, key values, and the fields for which data needs to be retrieved. These elements are then marshalled into a query."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---crafting-the-query",children:"COUCH64_Lookup1C - Crafting the Query"}),"\n",(0,o.jsx)(n.p,{children:"Following the assembly of the necessary text elements, the function CDB_conversate() is invoked to transmit the query to the CouchDB server and to receive the response, which includes both a header and a payload."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---response-handling",children:"COUCH64_Lookup1C - Response Handling"}),"\n",(0,o.jsx)(n.p,{children:"Upon receiving the response, the header is first examined to determine the status of the request (OK or otherwise). Subsequently, the payload is parsed to extract the data for the specified fields. This data is then copied to the output strings for further use."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_lookup1c---conclusion",children:"COUCH64_Lookup1C - Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"This method focuses on efficiently retrieving data for individual records by minimizing the overhead associated with network connections and streamlining the process of query formulation and response handling."}),"\n",(0,o.jsx)(n.h3,{id:"couch64_orlistquery",children:"COUCH64_ORListQuery"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"File"}),": ",(0,o.jsx)(n.code,{children:"couch64/orquery.c"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Line"}),": 98"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),": Invoked through the multiplexer function ",(0,o.jsx)(n.code,{children:"TMGT_ORListQuery"})," in ",(0,o.jsx)(n.code,{children:"tmgt64/lookup.c"})," line 411 and ",(0,o.jsx)(n.code,{children:"rconn64/sdmass.c"})," lines 1690 and 1260. Also used from ",(0,o.jsx)(n.code,{children:"rconn64/connset_couch.c"})," lines 215 and 32 through multiplexing in ",(0,o.jsx)(n.code,{children:"TMGT_connset"}),", ",(0,o.jsx)(n.code,{children:"tmgt64/xcinfo.c"})," line 23, and calls to ",(0,o.jsx)(n.code,{children:"DynRCONN_connsetCOUCH"})," (",(0,o.jsx)(n.code,{children:"tmgt64/rconndyn.c"})," line 147) at line 60, which then passes on to ",(0,o.jsx)(n.code,{children:"RCONN_connsetCOUCH()"})," via the dynamic link. It is utilized for identifying connected objects."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"couch64_orlistquery---implementation",children:"COUCH64_ORListQuery - Implementation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prototype"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:"int APIENTRY COUCH64_ORListQuery(\n  char *conbase,                                  /* Connection-table of interest */\n  void * handle,                                  /* DB/environment handle */\n  char *connhi2,                                  /* Record-field (LEFT_RSERIAL/RIGHT_RSERIAL) of a connection-table */\n  void *vpin, int incol,                          /* Report with input data records, values from field incol */\n  char *exfield,                                  /* Extraction field */\n  void **vpout                                    /* Output report data-set with fields */\n)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Constructs a series of queries combined with OR conditions like ",(0,o.jsx)(n.code,{children:"LEFT_RSERIAL==value1 OR LEFT_RSERIAL==value2 ..."})," when examining a connection table, aiming to obtain the value from the opposite ",(0,o.jsx)(n.code,{children:"RIGHT_RSERIAL"})," field."]}),"\n",(0,o.jsxs)(n.li,{children:["Input and output data adhere to the WinPCS Report format, as implemented in ",(0,o.jsx)(n.code,{children:"viewr64"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["The operation begins with environment checks, followed by the assembly of the ",(0,o.jsx)(n.code,{children:"_find"})," fragment and establishing a connection to the CouchDB server using ",(0,o.jsx)(n.code,{children:"CDB_Establish()"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["An output report data set is generated using ",(0,o.jsx)(n.code,{children:"AllocRRD()"})," in ",(0,o.jsx)(n.code,{children:"couch64/orquery.c"})," (115). The input is segmented into blocks of 20 records, each processed with a lengthy ",(0,o.jsx)(n.code,{children:"OR"})," selector."]}),"\n",(0,o.jsxs)(n.li,{children:["Subsequent to generating the ",(0,o.jsx)(n.code,{children:"OR"})," selectors, a call is made to the CouchDB server (line 157), where the received header is examined, and the payload processed accordingly."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h5,{id:"couch64_orlistquery---connection-to-couchdb",children:"COUCH64_ORListQuery - Connection to CouchDB"}),"\n",(0,o.jsx)(n.p,{children:"The connection to the CouchDB server is initiated with CDB_Establish(), facilitating the processing of queries by establishing a reliable network link."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_orlistquery---data-processing",children:"COUCH64_ORListQuery - Data Processing"}),"\n",(0,o.jsx)(n.p,{children:"Data processing involves dividing the input into chunks of 20 records, with each chunk undergoing query formulation with OR conditions. This efficient batch processing method optimizes query performance and response handling."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_orlistquery---query-execution-and-response",children:"COUCH64_ORListQuery - Query Execution and Response"}),"\n",(0,o.jsx)(n.p,{children:"Upon executing the query, the CouchDB server's response is meticulously analyzed. The process entails inspecting the header for determining the request's status and parsing the payload to extract and process the data for the specified fields."}),"\n",(0,o.jsx)(n.h5,{id:"couch64_orlistquery---conclusion",children:"COUCH64_ORListQuery - Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"This function exemplifies an efficient approach to querying connected objects within a database, emphasizing the importance of environment preparation, strategic query formulation, and thorough response analysis to achieve optimal data retrieval results."}),"\n",(0,o.jsx)(n.h1,{id:"original",children:"ORIGINAL"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"COUCH64_ORListQuery() couch64/orquery.c 98"}),"\n",(0,o.jsx)(n.p,{children:"Called through multiplexer function\nTMGT_ORListQuery()\nin tmgt64/lookup.c 411\nrconn64/sdmass.c 1690\nFunction ContinueListAllConnPlusSQL rconn64/sdmass.c 1260"}),"\n",(0,o.jsx)(n.p,{children:"rconn64/connset_couch.c 215\nFunction RCONN_connsetCOUCH\nrconn64/connset_couch.c 32"}),"\n",(0,o.jsx)(n.p,{children:"From multiplexing in TMGT_connset, tmgt64/xcinfo.c line 23,\ncall to DynRCONN_connsetCOUCH (tmgt64/rconndyn.c line 147)\nat line 60 which passes on to RCONN_connsetCOUCH() via the dynamic link."}),"\n",(0,o.jsx)(n.p,{children:"This is used to find connected objects."}),"\n",(0,o.jsx)(n.p,{children:"Implementation:"}),"\n",(0,o.jsx)(n.p,{children:"Prototype:"}),"\n",(0,o.jsxs)(n.p,{children:["int APIENTRY COUCH64_ORListQuery(char ",(0,o.jsx)(n.em,{children:"conbase,     /"})," The connection-table of interest ",(0,o.jsx)(n.em,{children:"/\nvoid * handle, \t\t\t\t\t\t\t\t\t/"})," DB/environment handle */\nchar ",(0,o.jsx)(n.em,{children:"connhi2,                                  /"})," Record-field (LEFT_RSERIAL/RIGHT_RSERIAL) of a connection-table where the input OR dat */\nvoid ",(0,o.jsx)(n.em,{children:"vpin, int incol,                          /"})," Report with input data records, values to be read from the field incol. */\nchar ",(0,o.jsx)(n.em,{children:"exfield,                                  /"})," Extraction field */\nvoid *",(0,o.jsx)(n.em,{children:"vpout)                                   /"})," Output report data-set with the fields in them */"]}),"\n",(0,o.jsx)(n.p,{children:"This bundles a bunch of queries ORed like LEFT_RSERIAL==value1 OR LEFT_RSERIAL==value2 ...\nwhen looking at some connection table, and the value of the opposite RIGHT_RSERIAL field\nis desired.  Both input and output data are in the WinPCS Report format (implementation is in viewr64)"}),"\n",(0,o.jsx)(n.p,{children:"The code starts as always with the environment checks, then assembles the _find fragment and opens the\nconnection to the couchdb server, with CDB_Establish().  Then the output report data set is created\n(AllocRRD() couch64/orquery.c (115)).  The input is divided into chunks of 20 records, and each of\nthese have one of these long OR selectors generated and processed.  Then the call to couchdb is made\n(line 157), the returned header is inspected and the payload is processed."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"COUCH64_ORQueryExt() couch64/orquery.c 330"}),"\n",(0,o.jsx)(n.p,{children:"Called through multiplexer function\nTMGT_ORQueryExt()\nin tmgt64/lookup.c 482\nsirep64/qcache.c"}),"\n",(0,o.jsx)(n.p,{children:"Used in status index reports."}),"\n",(0,o.jsx)(n.p,{children:"Implementation:"}),"\n",(0,o.jsx)(n.p,{children:"Prototype:"}),"\n",(0,o.jsxs)(n.p,{children:["int APIENTRY COUCH64_ORQueryExt(DATAHANDLE handle,\nchar ",(0,o.jsx)(n.em,{children:"tablename, \t\t\t\t\t\t\t\t/"})," Table to look in */\nchar **kfields, char *",(0,o.jsx)(n.em,{children:"kdata, int kcount,       /"})," Key-fields and values for AND part */\nchar *",(0,o.jsx)(n.em,{children:"exfield, int exfcount, \t\t\t\t\t/"})," Fields of interest into output */\nchar *ORfield, char *",(0,o.jsx)(n.em,{children:"ORvalues, int ORcount, \t/"})," Key-field and values for OR part, NULL and 0 for no OR part */\nvoid *",(0,o.jsx)(n.em,{children:"vpxout, \t\t\t\t\t\t\t\t\t/"})," Output in this report */\nchar *",(0,o.jsx)(n.em,{children:"pinfo1D)                                 /"})," info on success or otherwise, Alloc1D'd, or NULL if not interested */"]}),"\n",(0,o.jsx)(n.p,{children:"This is similar to the COUCH64_ORListQuery() but adds a possible\nlevel of ANDing of the values of the k fields and their kdata\nto the OR of the ORfield and their ORvalues."}),"\n",(0,o.jsx)(n.p,{children:"Also, the input is in the form of strings and not a listing in a Report structure."}),"\n",(0,o.jsx)(n.p,{children:"The output is in a Report, containing exfield fields."}),"\n",(0,o.jsx)(n.p,{children:"There is a mechanism of caching the results of these functions, used in status indexes, so there\nis no need to re-do the same queries over and over. Instead the stored results are recalled and\nused."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"COUCH64_DoSelectFwd     couch64/selects.c(264)"}),"\n",(0,o.jsx)(n.p,{children:"Does a single record selection, with an ordered index,\nreturns all fields in the record, and a bookmark value\nwhich is useable for navigating to the next record."}),"\n",(0,o.jsx)(n.p,{children:"COUCH64_DoScanPN \t\tcouch64/selects.c(581)"}),"\n",(0,o.jsx)(n.p,{children:"Uses the bookmark as established in a previous call to COUCH64_DoSelectFwd or\nCOUCH64_DoScanPN."}),"\n",(0,o.jsx)(n.p,{children:"These two functions lie behind the way Views, Entry, and Inspect window navigation works."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"COUCH64_HaveLocalUser  couch64/users.c: 105\nSetLUPass couch64/users.c: 464\nRemoveLU couch64/users.c: 723"}),"\n",(0,o.jsx)(n.p,{children:"These are user management functions, called from the client during log-on and when adding or changing\nWUSER records in parallel with _users."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Support function:"}),"\n",(0,o.jsx)(n.p,{children:"The function makeselector() is used with many of the above function calls to formulate the\nselector string for the query."})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);